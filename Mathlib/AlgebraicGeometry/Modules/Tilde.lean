/-
Copyright (c) 2024 Weihong Xu. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kevin Buzzard, Johan Commelin, Amelia Livingston, Sophie Morel, Jujian Zhang, Weihong Xu
-/

import Mathlib.Algebra.Module.LocalizedModule
import Mathlib.AlgebraicGeometry.StructureSheaf
import Mathlib.AlgebraicGeometry.Modules.Sheaf
import Mathlib.Algebra.Category.ModuleCat.Sheaf
import Mathlib.Algebra.Category.ModuleCat.FilteredColimits

/-!

# Construction of M^~

Given any commutative ring `R` and `R`-module `M`, we construct the sheaf `M^~` of `ùí™_SpecR`-modules
such that `M^~(U)` is the set of dependent functions that are locally fractions.

## Main definitions

* `ModuleCat.tildeInAddCommGrp` : `M^~` as a sheaf of abelian groups.
* `ModuleCat.tilde` : `M^~` as a sheaf of `ùí™_{Spec R}`-modules.

## Technical note

To get the `R`-module structure on the stalks on `M^~`, we had to define
`ModuleCat.tildeInModuleCat`, which is `M^~` seen as sheaf of `R`-modules. We get it by
applying a forgetful functor to `ModuleCat.tilde M`.

-/

universe u

open TopCat AlgebraicGeometry TopologicalSpace CategoryTheory Opposite

variable {R : Type u} [CommRing R] (M : ModuleCat.{u} R)

namespace ModuleCat

namespace Tilde

/-- For an `R`-module `M` and a point `P` in `Spec R`, `Localizations P` is the localized module
`M` at the prime ideal `P`. -/
abbrev Localizations (P : PrimeSpectrum.Top R) :=
LocalizedModule P.asIdeal.primeCompl M

/-- For any open subset `U ‚äÜ Spec R`, `IsFraction` is the predicate expressing that a function
`f : ‚àè_{x ‚àà U}, M‚Çì` is such that for any `ùî≠ ‚àà U`, `f ùî≠ = m / s` for some `m : M` and `s ‚àâ ùî≠`.
In short `f` is a fraction on `U`. -/
def isFraction {U : Opens (PrimeSpectrum R)} (f : ‚àÄ ùî≠ : U, Localizations M ùî≠.1) : Prop :=
  ‚àÉ (m : M) (s : R),
    ‚àÄ x : U, ¬¨s ‚àà x.1.asIdeal ‚àß s ‚Ä¢ f x = LocalizedModule.mkLinearMap x.1.asIdeal.primeCompl M m

/--
The property of a function `f : ‚àè_{x ‚àà U}, M‚Çì` being a fraction is stable under restriction.
-/
def isFractionPrelocal : PrelocalPredicate (Localizations M) where
  pred {U} f := isFraction M f
  res := by rintro V U i f ‚ü®m, s, w‚ü©; exact ‚ü®m, s, fun x ‚Ü¶ w (i x)‚ü©

/--
For any open subset `U ‚äÜ Spec R`, `IsLocallyFraction` is the predicate expressing that a function
`f : ‚àè_{x ‚àà U}, M‚Çì` is such that for any `ùî≠ ‚àà U`, there exists an open neighbourhood `V ‚àã ùî≠`, such
that for any `ùîÆ ‚àà V`, `f ùîÆ = m / s` for some `m : M` and `s ‚àâ ùîÆ`.
In short `f` is locally a fraction on `U`.
-/
def isLocallyFraction : LocalPredicate (Localizations M) := (isFractionPrelocal M).sheafify

@[simp]
theorem isLocallyFraction_pred {U : Opens (PrimeSpectrum.Top R)}
    (f : ‚àÄ x : U, Localizations M x) :
    (isLocallyFraction M).pred f =
      ‚àÄ y : U,
        ‚àÉ (V : _) (_ : y.1 ‚àà V) (i : V ‚ü∂ U),
          ‚àÉ (m : M) (s: R), ‚àÄ x : V, ¬¨s ‚àà x.1.asIdeal ‚àß s ‚Ä¢ f (i x) =
            LocalizedModule.mkLinearMap x.1.asIdeal.primeCompl M m :=
  rfl

/- M_x is an O_SpecR(U)-module when x is in U -/
noncomputable instance (U : (Opens (PrimeSpectrum.Top R))·µí·µñ) (x : U.unop):
    Module ((Spec.structureSheaf R).val.obj U) (Localizations M x):=
  Module.compHom (R := (Localization.AtPrime x.1.asIdeal)) _
    (StructureSheaf.openToLocalization R U.unop x x.2 :
      (Spec.structureSheaf R).val.obj U ‚Üí+* Localization.AtPrime x.1.asIdeal)

@[simp]
lemma sections_smul_localizations_def
    {U : (Opens (PrimeSpectrum.Top R))·µí·µñ} (x : U.unop)
    (r : (Spec.structureSheaf R).val.obj U)
    (m : Localizations M ‚Üëx) :
  r ‚Ä¢ m = r.1 x ‚Ä¢ m := rfl

/--
For any `R`-module `M` and any open subset `U ‚äÜ Spec R`, `M^~(U)` is an `ùí™_{Spec R}(U)`-submodule
of `‚àè_{ùî≠ ‚àà U} M_ùî≠`. -/
def sectionsSubmodule (U : (Opens (PrimeSpectrum R))·µí·µñ) :
    Submodule ((Spec.structureSheaf R).1.obj U) (‚àÄ x : U.unop, Localizations M x.1) where
  carrier := { f | (isLocallyFraction M).pred f }
  zero_mem' x := ‚ü®unop U, x.2, ùüô _, 0, 1, fun y ‚Ü¶
    ‚ü®Ideal.ne_top_iff_one _ |>.1 y.1.isPrime.1, by simp‚ü©‚ü©
  add_mem' := by
    intro a b ha hb x
    rcases ha x with ‚ü®Va, ma, ia, ra, sa, wa‚ü©
    rcases hb x with ‚ü®Vb, mb, ib, rb, sb, wb‚ü©
    refine ‚ü®Va ‚äì Vb, ‚ü®ma, mb‚ü©, Opens.infLELeft _ _ ‚â´ ia,  sb‚Ä¢ ra+ sa‚Ä¢rb , sa * sb, ?_‚ü©
    intro y
    rcases wa (Opens.infLELeft _ _ y : Va) with ‚ü®nma, wa‚ü©
    rcases wb (Opens.infLERight _ _ y : Vb) with ‚ü®nmb, wb‚ü©
    fconstructor
    ¬∑ intro H; cases y.1.isPrime.mem_or_mem H <;> contradiction
    ¬∑ simp only [Opens.coe_inf, Pi.add_apply, smul_add, map_add,
        LinearMapClass.map_smul] at wa wb ‚ä¢
      rw [‚Üê wa, ‚Üê wb, ‚Üê mul_smul, ‚Üê mul_smul]
      congr 2
      simp [mul_comm]
  smul_mem' := by
    intro r a ha x
    rcases ha x with ‚ü®Va, ma, ia, ra, sa, wa‚ü©
    rcases r.2 x with ‚ü®Vr, mr, ir, rr, sr, wr‚ü©
    refine ‚ü®Va ‚äì Vr, ‚ü®ma, mr‚ü©, Opens.infLELeft _ _ ‚â´ ia, rr‚Ä¢ra, sr*sa, ?_‚ü©
    intro y
    rcases wa (Opens.infLELeft _ _ y : Va) with ‚ü®nma, wa‚ü©
    rcases wr (Opens.infLERight _ _ y) with ‚ü®nmr, wr‚ü©
    fconstructor
    ¬∑ intro H; cases y.1.isPrime.mem_or_mem H <;> contradiction
    ¬∑ simp only [Opens.coe_inf, Pi.smul_apply, LinearMapClass.map_smul] at wa wr ‚ä¢
      rw [mul_comm, ‚Üê Algebra.smul_def] at wr
      rw [sections_smul_localizations_def, ‚Üê wa, ‚Üê mul_smul, ‚Üê smul_assoc, mul_comm sr, mul_smul,
        wr, mul_comm rr, Algebra.smul_def, ‚Üê map_mul]
      rfl

end Tilde

/--
For any `R`-module `M`, `TildeInType R M` is the sheaf of set on `Spec R` whose sections on `U` are
the dependent functions that are locally fractions. This is often denoted by `M^~`.

See also `Tilde.isLocallyFraction`.
-/
def tildeInType : Sheaf (Type u) (PrimeSpectrum.Top R) :=
  subsheafToTypes (Tilde.isLocallyFraction M)

instance (U : (Opens (PrimeSpectrum.Top R))·µí·µñ) :
    AddCommGroup (M.tildeInType.1.obj U) :=
  inferInstanceAs $ AddCommGroup (Tilde.sectionsSubmodule M U)

/--
`M^~` as a presheaf of abelian groups over `Spec R`
-/
def preTildeInAddCommGrp : Presheaf AddCommGrp (PrimeSpectrum.Top R) where
  obj U := .of ((M.tildeInType).1.obj U)
  map {U V} i :=
    { toFun := M.tildeInType.1.map i
      map_zero' := rfl
      map_add' := fun x y ‚Ü¶ rfl}

/--
`M^~` as a sheaf of abelian groups over `Spec R`
-/
def tildeInAddCommGrp : Sheaf AddCommGrp (PrimeSpectrum.Top R) :=
  ‚ü®M.preTildeInAddCommGrp,
    TopCat.Presheaf.isSheaf_iff_isSheaf_comp (forget AddCommGrp) _ |>.mpr
      (TopCat.Presheaf.isSheaf_of_iso (NatIso.ofComponents (fun _ ‚Ü¶ Iso.refl _) fun _ ‚Ü¶ rfl)
        M.tildeInType.2)‚ü©

noncomputable instance (U : (Opens (PrimeSpectrum.Top R))·µí·µñ) :
    Module ((Spec (.of R)).ringCatSheaf.1.obj U) (M.tildeInAddCommGrp.1.obj U) :=
  inferInstanceAs $ Module _ (Tilde.sectionsSubmodule M U)

/--
`M^~` as a sheaf of `ùí™_{Spec R}`-modules
-/
noncomputable def tilde : (Spec (CommRingCat.of R)).Modules where
  val :=
  { presheaf := M.tildeInAddCommGrp.1
    module := inferInstance
    map_smul := fun _ _ _ ‚Ü¶ rfl }
  isSheaf := M.tildeInAddCommGrp.2

/--
This is `M^~` as a sheaf of `R`-modules.
-/
noncomputable def tildeInModuleCat :
    TopCat.Presheaf (ModuleCat R) (PrimeSpectrum.Top R) :=
  (PresheafOfModules.forgetToPresheafModuleCat (op ‚ä§) $
    Limits.initialOpOfTerminal Limits.isTerminalTop).obj (tilde M).1 ‚ãô
  ModuleCat.restrictScalars (StructureSheaf.globalSectionsIso R).hom

namespace Tilde

@[simp]
theorem res_apply (U V : Opens (PrimeSpectrum.Top R)) (i : V ‚ü∂ U)
    (s : (tildeInModuleCat M).obj (op U)) (x : V) :
    ((tildeInModuleCat M).map i.op s).1 x = (s.1 (i x) : _) :=
  rfl

lemma smul_section_apply (r : R) (U : Opens (PrimeSpectrum.Top R))
    (s : (tildeInModuleCat M).1.obj (op U)) (x : U) :
    (r ‚Ä¢ s).1 x = r ‚Ä¢ (s.1 x) := rfl

/--
If `U` is an open subset of `Spec R`, this is the morphism of `R`-modules from `M` to
`M^~(U)`.
-/
def toOpen (U : Opens (PrimeSpectrum.Top R)) :
    ModuleCat.of R M ‚ü∂ (tildeInModuleCat M).1.obj (op U) where
  toFun f :=
  ‚ü®fun x ‚Ü¶ LocalizedModule.mkLinearMap _ _ f, fun x ‚Ü¶
    ‚ü®U, x.2, ùüô _, f, 1, fun y ‚Ü¶ ‚ü®(Ideal.ne_top_iff_one _).1 y.1.2.1, by simp‚ü©‚ü©‚ü©
  map_add' f g := Subtype.eq <| funext fun x ‚Ü¶ LinearMap.map_add _ _ _
  map_smul' r m := by
    simp only [isLocallyFraction_pred, LocalizedModule.mkLinearMap_apply, LinearMapClass.map_smul,
      RingHom.id_apply]
    rfl

@[simp]
theorem toOpen_res (U V : Opens (PrimeSpectrum.Top R)) (i : V ‚ü∂ U) :
    toOpen M U ‚â´ (tildeInModuleCat M).map i.op = toOpen M V :=
  rfl

/--
If `x` is a point of `Spec R`, this is the morphism of `R`-modules from `M` to the stalk of
`M^~` at `x`.
-/
noncomputable def toStalk (x : PrimeSpectrum.Top R) :
    ModuleCat.of R M ‚ü∂ TopCat.Presheaf.stalk (tildeInModuleCat M) x :=
  (toOpen M ‚ä§ ‚â´ TopCat.Presheaf.germ (tildeInModuleCat M) ‚ü®x, by trivial‚ü©)


lemma isUnit_toStalk (x : PrimeSpectrum.Top R) (r : x.asIdeal.primeCompl) :
    IsUnit ((algebraMap R (Module.End R ((tildeInModuleCat M).stalk x))) r) := by
  rw [Module.End_isUnit_iff]
  refine ‚ü®LinearMap.ker_eq_bot.1 $ eq_bot_iff.2 fun st (h : r.1 ‚Ä¢ st = 0) ‚Ü¶ ?_, fun st ‚Ü¶ ?_‚ü©
  ¬∑ simp only [LinearMap.mem_ker, Module.algebraMap_end_apply, Submodule.mem_bot] at h ‚ä¢
    obtain ‚ü®U, mem, s, rfl‚ü© := TopCat.Presheaf.germ_exist (F := (tildeInModuleCat M)) x st
    erw [‚Üê (M.tildeInModuleCat.germ ‚ü®x, mem‚ü©).map_smul r.1 s] at h
    obtain ‚ü®‚ü®‚ü®W, (mem_W : x ‚àà W)‚ü©‚ü©, iU, (h : M.tildeInModuleCat.map _ _ = 0)‚ü© :=
      Limits.Concrete.colimit_rep_eq_zero (hx := h)
    obtain ‚ü®W', (mem_W' : x ‚àà W'), (iW : W' ‚ü∂ W), num, _, _‚ü© :=
      ((tildeInModuleCat M).map iU) s |>.2 ‚ü®x, mem_W‚ü©
    let O := W' ‚äì (PrimeSpectrum.basicOpen r)
    suffices (tildeInModuleCat M).map
        (op $ (homOfLE $ inf_le_left.trans (leOfHom $ iW ‚â´ iU.unop) : O ‚ü∂ U)) s = 0 by
      rw [congr((tildeInModuleCat M).germ (‚ü®x, ‚ü®mem_W', r.2‚ü©‚ü© :
        (W' ‚äì PrimeSpectrum.basicOpen r.1 : Opens _)) $this).symm.trans
        (TopCat.Presheaf.germ_res_apply _ _ _ _) |>.symm, map_zero]

    exact Subtype.ext $ funext fun q ‚Ü¶ LocalizedModule.eq_zero_of_smul_eq_zero
      (hx := congr_fun (Subtype.ext_iff.1 congr((tildeInModuleCat M).map (op iW) $h)) ‚ü®q.1, q.2.1‚ü©)
      q.2.2

  ¬∑ obtain ‚ü®U, mem, s, rfl‚ü© := TopCat.Presheaf.germ_exist (F := (tildeInModuleCat M)) x st
    let O := U ‚äì (PrimeSpectrum.basicOpen r)
    have mem_O : x ‚àà O := ‚ü®mem, r.2‚ü©
    refine ‚ü®TopCat.Presheaf.germ (tildeInModuleCat M) ‚ü®x, mem_O‚ü©
      ‚ü®fun q ‚Ü¶ (Localization.mk 1 ‚ü®r, q.2.2‚ü© : Localization.AtPrime q.1.asIdeal) ‚Ä¢ s.1
        ‚ü®q.1, q.2.1‚ü©, fun q ‚Ü¶ ?_‚ü©, ?_‚ü©
    ¬∑ obtain ‚ü®V, mem_V, (iV : V ‚ü∂ U), num, den, hV‚ü© := s.2 ‚ü®q.1, q.2.1‚ü©
      refine ‚ü®V ‚äì O, ‚ü®mem_V, q.2‚ü©, homOfLE inf_le_right, num, r * den, fun y ‚Ü¶ ?_‚ü©
      obtain ‚ü®h1, h2‚ü© := hV ‚ü®y, y.2.1‚ü©
      refine ‚ü®y.1.asIdeal.primeCompl.mul_mem y.2.2.2 h1, ?_‚ü©
      simp only [Opens.coe_inf, isLocallyFraction_pred, LocalizedModule.mkLinearMap_apply] at h2 ‚ä¢
      rw [LocalizedModule.smul_eq_iff_of_mem (S := y.1.asIdeal.primeCompl) (hr := h1),
        LocalizedModule.mk_smul_mk, one_smul, mul_one] at h2
      rw [h2, LocalizedModule.mk_smul_mk, one_smul, LocalizedModule.smul'_mk, LocalizedModule.mk_eq]
      refine ‚ü®1, by simp only [one_smul]; rfl‚ü©
    ¬∑ simp only [isLocallyFraction_pred, LocalizedModule.mkLinearMap_apply,
        Module.algebraMap_end_apply]
      rw [‚Üê map_smul]
      refine TopCat.Presheaf.germ_ext (W := O) (hxW := mem_O) (iWU := ùüô _)
        (iWV := homOfLE inf_le_left) _ $ Subtype.eq <| funext fun y ‚Ü¶ ?_
      simp only [isLocallyFraction_pred, LocalizedModule.mkLinearMap_apply, op_id,
        CategoryTheory.Functor.map_id, LinearMapClass.map_smul,
        id_apply]
      rw [smul_section_apply, LocalizedModule.smul_eq_iff_of_mem]
      rfl

/--
The morphism of `R`-modules from the localization of `M` at the prime ideal corresponding to `x`
to the stalk of `M^~` at `x`.
-/
noncomputable def localizationToStalk (x : PrimeSpectrum.Top R) :
    ModuleCat.of R (LocalizedModule x.asIdeal.primeCompl M) ‚ü∂
    (TopCat.Presheaf.stalk (tildeInModuleCat M) x) :=
  LocalizedModule.lift _ (toStalk M x) $ isUnit_toStalk M x

end Tilde

end ModuleCat
