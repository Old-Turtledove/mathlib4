/-
Copyright (c) 2024 Weihong Xu. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Weihong Xu
-/
import Mathlib.AlgebraicGeometry.Spec
import Mathlib.Algebra.Category.ModuleCat.Sheaf

/-!

# Construction of M^~

Given any commutative ring `R` and `R`-module `M`, we construct the sheaf `M^~` of `ùí™_SpecR`-modules
such that `M^~(U)` is the set of dependent functions that are locally fractions.

-/

open TopCat AlgebraicGeometry TopologicalSpace CategoryTheory Opposite

variable (R: Type) [CommRing R] (M: Type) [AddCommGroup M] [Module R M]

namespace Tilde

/--p-->M_p-/
abbrev Localizations (P: PrimeSpectrum.Top R) : Type :=
LocalizedModule P.asIdeal.primeCompl M

/--a section is globally a fraction m/s-/
def IsFraction {U : Opens (PrimeSpectrum.Top R)} (f : ‚àÄ ‚Ñò : U, Localizations R M ‚Ñò) : Prop :=
  ‚àÉ (m: M) (s: R), ‚àÄ x : U, ¬¨s ‚àà x.1.asIdeal ‚àß s ‚Ä¢
    f x = LocalizedModule.mkLinearMap x.1.asIdeal.primeCompl M m

def isFractionPrelocal : PrelocalPredicate (Localizations R M) where
  pred {U} f := IsFraction R M f
  res := by rintro V U i f ‚ü®m, s, w‚ü©; exact ‚ü®m, s, fun x => w (i x)‚ü©

/--a section is locally a fraction-/
def isLocallyFraction : LocalPredicate (Localizations R M) := (isFractionPrelocal R M).sheafify

end Tilde

def TildeInType : Sheaf (Type) (PrimeSpectrum.Top R):=subsheafToTypes (Tilde.isLocallyFraction R M)

namespace Tilde

@[simp]
theorem isLocallyFraction_pred {U : Opens (PrimeSpectrum.Top R)}
    (f : ‚àÄ x : U, Localizations R M x) :
    (isLocallyFraction R M).pred f =
      ‚àÄ y : U,
        ‚àÉ (V : _) (_ : y.1 ‚àà V) (i : V ‚ü∂ U),
          ‚àÉ (m: M) (s: R), ‚àÄ x : V, ¬¨s ‚àà x.1.asIdeal ‚àß s‚Ä¢ f (i x) =
            LocalizedModule.mkLinearMap x.1.asIdeal.primeCompl M m :=
  rfl

-- def sectionsAddSubgroup (U : (Opens (PrimeSpectrum.Top R))·µí·µñ) :
--     AddSubgroup (‚àÄ x : U.unop, Localizations R M x) where
--   carrier := { f | (isLocallyFraction R M).pred f }
--   zero_mem' := by
--     refine fun x => ‚ü®unop U, x.2, ùüô _, 0, 1, fun y => ‚ü®?_, ?_‚ü©‚ü©
--     ¬∑ rw [‚Üê Ideal.ne_top_iff_one]; exact y.1.isPrime.1
--     ¬∑ simp
--   add_mem' := by
--     intro a b ha hb x
--     rcases ha x with ‚ü®Va, ma, ia, ra, sa, wa‚ü©
--     rcases hb x with ‚ü®Vb, mb, ib, rb, sb, wb‚ü©
--     refine ‚ü®Va ‚äì Vb, ‚ü®ma, mb‚ü©, Opens.infLELeft _ _ ‚â´ ia,  sb‚Ä¢ ra+ sa‚Ä¢rb , sa * sb, ?_‚ü©
--     intro y
--     rcases wa (Opens.infLELeft _ _ y) with ‚ü®nma, wa‚ü©
--     rcases wb (Opens.infLERight _ _ y) with ‚ü®nmb, wb‚ü©
--     fconstructor
--     ¬∑ intro H; cases y.1.isPrime.mem_or_mem H <;> contradiction
--     ¬∑ simp only [Opens.coe_inf, Pi.add_apply, smul_add, map_add, LinearMapClass.map_smul]
--       erw [‚Üê wa, ‚Üê wb]
--       dsimp
--       rw [‚Üê smul_assoc,‚Üê smul_assoc]
--       congr 2
--       simp [mul_comm]
--   neg_mem' := by
--     intro a ha x
--     rcases ha x with ‚ü®V, m, i, r, s, w‚ü©
--     refine ‚ü®V, m, i, -r, s, ?_‚ü©
--     intro y
--     rcases w y with ‚ü®nm, w‚ü©
--     fconstructor
--     ¬∑ exact nm
--     ¬∑ simp only [Pi.neg_apply, smul_neg, map_neg, neg_inj]
--       erw [‚Üê w]

/--M_x is an O_SpecR(U)-module when x is in U-/
noncomputable instance (U : (Opens (PrimeSpectrum.Top R))·µí·µñ) (x : U.unop):
    Module ((Spec.structureSheaf R).val.obj U) (Localizations R M ‚Üëx):=
  Module.compHom (R := (Localization.AtPrime x.1.asIdeal)) _
    (StructureSheaf.openToLocalization R U.unop x x.2 :
      (Spec.structureSheaf R).val.obj U ‚Üí+* Localization.AtPrime x.1.asIdeal)

lemma smul_def (U : (Opens (PrimeSpectrum.Top R))·µí·µñ) (x : U.unop)
    (r : (Spec.structureSheaf R).val.obj U)
    (m : Localizations R M ‚Üëx) :
  r ‚Ä¢ m = r.1 x ‚Ä¢ m := rfl

/--M(U) is a O(U)-submodule of Œ† M_x-/
def sectionsSubmodule (U : (Opens (PrimeSpectrum.Top R))·µí·µñ) :
    Submodule ((Spec.structureSheaf R).1.obj U) (‚àÄ x : U.unop, Localizations R M x) where
  carrier := { f | (isLocallyFraction R M).pred f }
  zero_mem' := by
    refine fun x => ‚ü®unop U, x.2, ùüô _, 0, 1, fun y => ‚ü®?_, ?_‚ü©‚ü©
    ¬∑ rw [‚Üê Ideal.ne_top_iff_one]; exact y.1.isPrime.1
    ¬∑ simp
  add_mem' := by
    intro a b ha hb x
    rcases ha x with ‚ü®Va, ma, ia, ra, sa, wa‚ü©
    rcases hb x with ‚ü®Vb, mb, ib, rb, sb, wb‚ü©
    refine ‚ü®Va ‚äì Vb, ‚ü®ma, mb‚ü©, Opens.infLELeft _ _ ‚â´ ia,  sb‚Ä¢ ra+ sa‚Ä¢rb , sa * sb, ?_‚ü©
    intro y
    rcases wa (Opens.infLELeft _ _ y) with ‚ü®nma, wa‚ü©
    rcases wb (Opens.infLERight _ _ y) with ‚ü®nmb, wb‚ü©
    fconstructor
    ¬∑ intro H; cases y.1.isPrime.mem_or_mem H <;> contradiction
    ¬∑ simp only [Opens.coe_inf, Pi.add_apply, smul_add, map_add, LinearMapClass.map_smul]
      erw [‚Üê wa, ‚Üê wb]
      dsimp
      rw [‚Üê smul_assoc,‚Üê smul_assoc]
      congr 2
      simp [mul_comm]
  smul_mem' := by
    intro r a ha x
    rcases ha x with ‚ü®Va, ma, ia, ra, sa, wa‚ü©
    rcases r.2 x with ‚ü®Vr, mr, ir, rr, sr, wr‚ü©
    refine ‚ü®Va ‚äì Vr, ‚ü®ma, mr‚ü©, Opens.infLELeft _ _ ‚â´ ia, rr‚Ä¢ra, sr*sa, ?_‚ü©
    intro y
    rcases wa (Opens.infLELeft _ _ y) with ‚ü®nma, wa‚ü©
    rcases wr (Opens.infLERight _ _ y) with ‚ü®nmr, wr‚ü©
    fconstructor
    ¬∑ intro H; cases y.1.isPrime.mem_or_mem H <;> contradiction
    ¬∑ simp only [Opens.coe_inf, Pi.smul_apply, LinearMapClass.map_smul]
      dsimp at wa wr ‚ä¢
      rw[smul_def]
      erw [‚Üê wa]
      rw [‚Üê smul_assoc,‚Üê smul_assoc]
      congr 2
      simp [mul_comm]
      erw [‚Üê wr]
      erw [mul_left_comm,‚Üê RingHom.map_mul]
      conv_rhs => rw [mul_comm]
      rw [Algebra.smul_def]
      rfl

instance (U : (Opens (PrimeSpectrum.Top R))·µí·µñ) :
    AddCommGroup ((TildeInType R M).1.obj U) :=
  inferInstanceAs $ AddCommGroup (sectionsSubmodule R M U)

def PresheafInAddCommGrp : Presheaf AddCommGrp (PrimeSpectrum.Top R) where
  obj U := AddCommGrp.of ((TildeInType R M).1.obj U)
  map {U V} i :=
    { toFun := (TildeInType R M).1.map i
      map_zero' := rfl
      map_add' := fun x y => rfl}

def PresheafCompForget :
    PresheafInAddCommGrp R M ‚ãô forget AddCommGrp ‚âÖ (TildeInType R M).1 :=
  NatIso.ofComponents fun U => Iso.refl _

def SheafInAddCommGrp : Sheaf AddCommGrp (PrimeSpectrum.Top R) :=
  ‚ü®PresheafInAddCommGrp R M,
    (-- We check the sheaf condition under `forget CommRingCat`.
          TopCat.Presheaf.isSheaf_iff_isSheaf_comp
          _ _).mpr
      (TopCat.Presheaf.isSheaf_of_iso (PresheafCompForget R M).symm (TildeInType R M).cond)‚ü©

/--sheaf of comm ring--sheaf of ring>-/
def forget2Ring :=
  sheafCompose (Opens.grothendieckTopology (PrimeSpectrum.Top R))
    (forget‚ÇÇ CommRingCat RingCat) |>.obj (Spec.structureSheaf R)

noncomputable instance (U : (Opens (PrimeSpectrum.Top R))·µí·µñ) :
    Module ((forget2Ring R).val.obj U) ((PresheafInAddCommGrp R M).obj U) :=
  inferInstanceAs $ Module _ (sectionsSubmodule R M U)

noncomputable def TildeInModules : SheafOfModules (forget2Ring R) where
  val := {
    presheaf := (PresheafInAddCommGrp R M)
    module := inferInstance
    map_smul := by
      intro U V f r m
      dsimp [SheafInAddCommGrp, PresheafInAddCommGrp, TildeInType]
      rw [Subtype.ext_iff]
      ext x
      dsimp [subpresheafToTypes]
      simp only [forget2Ring, sheafCompose_obj_val, Functor.comp_obj, Functor.comp_map] at r ‚ä¢
      change (Spec.structureSheaf R).val.obj U at r
      change r ‚Ä¢ (m.1 ‚ü®x.1, _‚ü©) = _
      rw [smul_def]
      rfl
  }
  isSheaf := (SheafInAddCommGrp R M).2

end Tilde
