/-
Copyright (c) 2024 Jack McKoen. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jack McKoen
-/
import Mathlib.CategoryTheory.ChosenFiniteProducts.FunctorCategory
import Mathlib.CategoryTheory.Closed.Cartesian
import Mathlib.CategoryTheory.Monoidal.FunctorCategory
import Mathlib.CategoryTheory.Monoidal.Types.Basic

/-!
# Functors to Type are closed.

Show that `C โฅค Type max w v u` is monoidal closed for `C` a category in `Type u` with morphisms in
`Type v`, and `w` an arbitrary universe.

## TODO
It should be shown that `C โฅค Type max w v u` is cartesian closed.
-/


universe w v' v u u'

open CategoryTheory MonoidalCategory

variable {C : Type u} [Category.{v} C] {D : Type u'} [Category.{v'} D]

namespace CategoryTheory.Functor

variable (F G : C โฅค D)

/-- Given functors `F G : C โฅค D`, `HomObj F G A` is a proxy for the type
  of "morphisms" `F โ A โถ G`, where `A : C โฅค Type w` (`w` an arbitrary universe). -/
@[ext]
structure HomObj (A : C โฅค Type w) where
  app (c : C) (a : A.obj c) : F.obj c โถ G.obj c
  naturality {c d : C} (f : c โถ d) (a : A.obj c) :
    F.map f โซ app d (A.map f a) = app c a โซ G.map f := by aesop_cat

/-- When `F`, `G`, and `A` are all functors `C โฅค Type w`, then `HomObj F G A` is in
  bijection with `F โ A โถ G`. -/
def HomObjEquiv (F G A : C โฅค Type w) : (F โ A โถ G) โ (HomObj F G A) where
  toFun a := โจfun X y x โฆ a.app X (x, y), fun ฯ y โฆ by
    ext x
    erw [congr_fun (a.naturality ฯ) (x, y)]
    rfl โฉ
  invFun a := โจfun X โจx, yโฉ โฆ a.app X y x, fun X Y f โฆ by
    ext โจx, yโฉ
    erw [congr_fun (a.naturality f y) x]
    rfl โฉ
  left_inv _ := by aesop
  right_inv _ := by aesop

namespace HomObj

attribute [reassoc (attr := simp)] naturality

variable {F G} {A : C โฅค Type w}

lemma congr_app {f g : HomObj F G A} (h : f = g) (X : C)
    (a : A.obj X) : f.app X a = g.app X a := by subst h; rfl

/-- Given a natural transformation `F โถ G`, get a term of `HomObj F G A` by "ignoring" `A`. -/
@[simps]
def ofNatTrans {A : C โฅค Type w} (f : F โถ G) : HomObj F G A where
  app X _ := f.app X

/-- The identity `HomObj F F A`. -/
abbrev id (A : C โฅค Type w) : HomObj F F A := ofNatTrans (๐ F)

/- Composition of `f : HomObj F G A` with `g : HomObj G M A`. -/
@[simps]
def comp {M : C โฅค D} (f : HomObj F G A) (g : HomObj G M A) : HomObj F M A where
  app X a := f.app X a โซ g.app X a

/-- Given a morphism `A' โถ A`, send a term of `HomObj F G A` to a term of `HomObj F G A'`. -/
@[simps]
def map (x : HomObj F G A) {A' : C โฅค Type w} (f : A' โถ A) : HomObj F G A' where
  app ฮ a := x.app ฮ (f.app ฮ a)
  naturality {ฮ ฮ'} ฯ a := by
    dsimp
    rw [โ x.naturality ฯ (f.app ฮ a), FunctorToTypes.naturality _ _ f ฯ a]

end HomObj

/-- The contravariant functor taking `A : C โฅค Type w` to `HomObj F G A`. -/
def HomObjFunctor : (C โฅค Type w)แตแต โฅค Type max w v' u where
  obj A := HomObj F G A.unop
  map {A A'} f x :=
    { app := fun X a โฆ x.app X (f.unop.app _ a)
      naturality := fun {X Y} ฯ a โฆ by
        dsimp
        rw [โ HomObj.naturality]
        congr 2
        exact congr_fun (f.unop.naturality ฯ) a }

/-- Composition of `HomObjFunctor` with the co-Yoneda embedding.
  When `F G : C โฅค Type max v' v u`, this is the internal hom of `F` and `G`. -/
def functorHom (F G : C โฅค D) : C โฅค Type max v' v u := coyoneda.rightOp โ HomObjFunctor.{v} F G

variable {F G} in
@[ext]
lemma functorHom_ext {X : C} {x y : (F.functorHom G).obj X}
    (h : โ (Y : C) (f : X โถ Y), x.app Y f = y.app Y f) : x = y :=
  HomObj.ext (by ext; apply h)

/-- The bijection `HomObj F G A โ (A โถ F.functorHom G)` which
  prefaces `FunctorToTypes.functorHomEquiv` -/
def functorHomEquiv (A : C โฅค Type max u v v') : HomObj F G A โ (A โถ F.functorHom G) where
  toFun x :=
    { app := fun X a โฆ { app := fun Y f => x.app Y (A.map f a) }
      naturality := fun X Y f => by
        ext a Z ฯ
        dsimp only [types_comp_apply]
        rw [โ FunctorToTypes.map_comp_apply]
        rfl }
  invFun ฯ :=
    { app := fun X a โฆ (ฯ.app X a).app X (๐ _)
      naturality := fun {X Y} f a => by
        rw [โ (ฯ.app X a).naturality f (๐ _)]
        have := HomObj.congr_app (congr_fun (ฯ.naturality f) a) Y (๐ _)
        dsimp [functorHom, HomObjFunctor] at this
        aesop }
  left_inv x := by aesop
  right_inv ฯ := by
    ext X a Y f
    exact (HomObj.congr_app (congr_fun (ฯ.naturality f) a) Y (๐ _)).trans
      (congr_arg ((ฯ.app X a).app Y) (by simp))

variable {F G} in
/-- Morphisms `F โถ G` are in bijection with
  morphisms `(๐_ (C โฅค Type max v' v u) โถ F.functorHom G)`-/
@[simps]
def natTransEquiv : (F โถ G) โ (๐_ (C โฅค Type max v' v u) โถ F.functorHom G) where
  toFun f := โจfun _ _ โฆ HomObj.ofNatTrans f, _โฉ
  invFun f := โจfun X โฆ (f.app X (PUnit.unit)).app X (๐ _), by
    intro X Y ฯ
    rw [โ (f.app X (PUnit.unit)).naturality ฯ]
    congr 1
    have := HomObj.congr_app (congr_fun (f.naturality ฯ) PUnit.unit) Y (๐ Y)
    dsimp [functorHom, HomObjFunctor] at this
    aesop โฉ
  left_inv _ := rfl
  right_inv f := by
    ext X a Y ฯ
    have := HomObj.congr_app (congr_fun (f.naturality ฯ) PUnit.unit) Y (๐ Y)
    dsimp [functorHom, HomObjFunctor] at this
    aesop

end Functor

namespace FunctorToTypes

variable (F : C โฅค Type max w v u)

open Functor in
/-- When `F G H : C โฅค Type max w v u`, we have `(F โ G โถ H) โ (G โถ F.functorHom H)`. -/
def functorHomEquiv (G H : C โฅค Type max w v u) : (F โ G โถ H) โ (G โถ F.functorHom H) :=
  (HomObjEquiv F H G).trans (Functor.functorHomEquiv F H G)

/-- Given a morphism `f : G โถ H`, an object `c : C`, and an element of `(F.functorHom G).obj c`,
construct an element of `(F.functorHom H).obj c`. -/
def rightAdj_map {F G H : C โฅค Type max w v u} (f : G โถ H) (c : C) (a : (F.functorHom G).obj c) :
    (F.functorHom H).obj c where
      app := fun d b โฆ (a.app d b) โซ (f.app d)
      naturality g h := by
        have := a.naturality g h
        change (F.map g โซ a.app _ (h โซ g)) โซ _ = _
        aesop

/-- A right adjoint of `tensorLeft F`. -/
def rightAdj : (C โฅค Type max w v u) โฅค C โฅค Type max w v u where
  obj G := F.functorHom G
  map f := { app := rightAdj_map f }

open Functor in
/-- The adjunction `tensorLeft F โฃ rightAdj F`. -/
def adj : tensorLeft F โฃ rightAdj F where
  homEquiv := functorHomEquiv F
  unit := {
    app := fun G โฆ functorHomEquiv F _ _ (๐ _)
    naturality := fun G H f โฆ by
      ext c y
      dsimp [rightAdj, functorHomEquiv, Functor.functorHomEquiv]
      ext d
      dsimp only [Monoidal.tensorObj_obj, rightOp_obj]
      rw [Eq.symm (FunctorToTypes.naturality G H f _ y)]
      rfl }
  counit := { app := fun G โฆ (functorHomEquiv F _ _).2 (๐ _) }

instance closed : Closed F where
  adj := adj F

instance monoidalClosed : MonoidalClosed (C โฅค Type max w v u) where

end FunctorToTypes

end CategoryTheory
