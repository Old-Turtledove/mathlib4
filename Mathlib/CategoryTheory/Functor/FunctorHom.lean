import Mathlib.AlgebraicTopology.SimplicialCategory.Basic
import Mathlib.AlgebraicTopology.SimplicialSet.Monoidal
import Mathlib.CategoryTheory.Enriched.Basic

universe w v' v u u'

namespace CategoryTheory.Functor

variable {C : Type u} [Category.{v} C] {D : Type u'} [Category.{v'} D]

variable (F G : C ‚•§ D)

open MonoidalCategory

@[ext]
structure HomObj (A : C ‚•§ Type w) where
  app (X : C) (a : A.obj X) : F.obj X ‚ü∂ G.obj X
  naturality {X Y : C} (œÜ : X ‚ü∂ Y) (a : A.obj X) :
    F.map œÜ ‚â´ app Y (A.map œÜ a) = app X a ‚â´ G.map œÜ := by aesop_cat

namespace HomObj

attribute [reassoc (attr := simp)] naturality

variable {F G} in
lemma congr_app {A : C ‚•§ Type w} {f g : HomObj F G A} (h : f = g) (X : C)
    (a : A.obj X) : f.app X a = g.app X a := by subst h; rfl

@[simps]
def id (A : C ‚•§ Type w) : HomObj F F A where
  app _ _ := ùüô _

variable {F G}

variable {A : C ‚•§ Type w}

@[simps]
def comp {M : C ‚•§ D} (f : HomObj F G A) (g : HomObj G M A) : HomObj F M A where
  app X a := f.app X a ‚â´ g.app X a

/-- -/
@[simps]
def map (x : HomObj F G A) {A' : C ‚•§ Type w} (f : A' ‚ü∂ A) : HomObj F G A' where
  app Œî a := x.app Œî (f.app Œî a)
  naturality {Œî Œî'} œÜ a := by
    dsimp
    rw [‚Üê x.naturality œÜ (f.app Œî a), FunctorToTypes.naturality _ _ f œÜ a]

@[simps]
def ofNatTrans (f : F ‚ü∂ G) : HomObj F G A where
  app X _ := f.app X

end HomObj

/-- The contravariant functor taking `A : C ‚•§ Type w` to `HomObj F G A`. -/
@[simps!]
def HomObjFunctor : (C ‚•§ Type w)·µí·µñ ‚•§ Type max w v' u where
  obj A := HomObj F G A.unop
  map {A A'} f x := x.map f.unop

def functorHom : C ‚•§ Type max v' v u := coyoneda.rightOp ‚ãô HomObjFunctor.{v} F G

variable {F G} in
@[ext]
lemma functorHom_ext {X : C} {x y : (functorHom F G).obj X}
    (h : ‚àÄ (Y : C) (f : X ‚ü∂ Y), x.app Y f = y.app Y f) : x = y :=
  HomObj.ext _ _ (by ext; apply h)

def functorHomEquiv (A : C ‚•§ Type max u v v') : (A ‚ü∂ functorHom F G) ‚âÉ HomObj F G A where
  toFun œÜ :=
    { app := fun X a ‚Ü¶ (œÜ.app X a).app X (ùüô _)
      naturality := fun {X Y} f a => by
        rw [‚Üê (œÜ.app X a).naturality f (ùüô _)]
        have := HomObj.congr_app (congr_fun (œÜ.naturality f) a) Y (ùüô _)
        dsimp [functorHom] at this
        aesop }
  invFun x :=
    { app := fun X a ‚Ü¶ { app := fun Y f => x.app Y (A.map f a) }
      naturality := fun X Y f => by
        ext a Z œÜ
        dsimp only [types_comp_apply]
        rw [‚Üê FunctorToTypes.map_comp_apply]
        rfl }
  left_inv œÜ := by
    ext X a Y f
    exact (HomObj.congr_app (congr_fun (œÜ.naturality f) a) Y (ùüô _)).trans
      (congr_arg ((œÜ.app X a).app Y) (by simp))
  right_inv x := by aesop

variable {F G} in
@[simps]
def natTransEquiv : (F ‚ü∂ G) ‚âÉ (ùüô_ _ ‚ü∂ functorHom F G) where
  toFun f := ‚ü®fun _ _ ‚Ü¶ HomObj.ofNatTrans f, _‚ü©
  invFun f := ‚ü®fun X ‚Ü¶ (f.app X (PUnit.unit)).app X (ùüô _), by
    intro X Y œÜ
    rw [‚Üê (f.app X (PUnit.unit)).naturality œÜ]
    congr 1
    have := HomObj.congr_app (congr_fun (f.naturality œÜ) PUnit.unit) Y (ùüô Y)
    dsimp [functorHom] at this
    aesop ‚ü©
  left_inv _ := rfl
  right_inv f := by
    ext X a Y œÜ
    have := HomObj.congr_app (congr_fun (f.naturality œÜ) PUnit.unit) Y (ùüô Y)
    dsimp [functorHom] at this
    aesop

@[simp]
lemma natTransEquiv_app_app_apply (F G : C ‚•§ D) (f : F ‚ü∂ G)
    {X : C} {a : (ùüô_ (C ‚•§ Type (max v' v u))).obj X} (Y : C) {œÜ : X ‚ü∂ Y} :
    ((natTransEquiv f).app X a).app Y œÜ = f.app Y := rfl

@[simp]
lemma natTransEquiv_whiskerRight_functorHom_app (K L : C ‚•§ D) (X : C) (f : K ‚ü∂ K)
    (x : ùüô_ _ ‚äó (K.functorHom L).obj X) :
    ((natTransEquiv f ‚ñ∑ K.functorHom L).app X x) =
    (HomObj.ofNatTrans f, x.2) := rfl

@[simp]
lemma functorHom_whiskerLeft_natTransEquiv_app (K L : C ‚•§ D) (X : C) (f : L ‚ü∂ L)
    (x : (K.functorHom L).obj X ‚äó ùüô_ _) :
    ((K.functorHom L ‚óÅ natTransEquiv f).app X x) =
    (x.1, HomObj.ofNatTrans f) := rfl

@[simp]
lemma whiskerLeft_app_apply (K L M N : C ‚•§ D)
    (g : L.functorHom M ‚äó M.functorHom N ‚ü∂ L.functorHom N)
    {X : C} (a : (K.functorHom L ‚äó L.functorHom M ‚äó M.functorHom N).obj X) :
    (K.functorHom L ‚óÅ g).app X a = ‚ü®a.1, g.app X a.2‚ü© := rfl

@[simp]
lemma whiskerRight_app_apply (K L M N : C ‚•§ D)
    (f : K.functorHom L ‚äó L.functorHom M ‚ü∂ K.functorHom M)
    {X : C} (a : ((K.functorHom L ‚äó L.functorHom M) ‚äó M.functorHom N).obj X) :
    (f ‚ñ∑  M.functorHom N).app X a = ‚ü®f.app X a.1, a.2‚ü© := rfl

@[simp]
lemma associator_inv_apply (K L M N : C ‚•§ D) {X : C}
    (x : ((K.functorHom L) ‚äó (L.functorHom M) ‚äó (M.functorHom N)).obj X) :
    (Œ±_ ((K.functorHom L).obj X) ((L.functorHom M).obj X) ((M.functorHom N).obj X)).inv x =
    ‚ü®‚ü®x.1, x.2.1‚ü©, x.2.2‚ü© := rfl

@[simp]
lemma associator_hom_apply (K L M N : C ‚•§ D) {X : C}
    (x : ( ((K.functorHom L) ‚äó (L.functorHom M)) ‚äó (M.functorHom N)).obj X) :
    (Œ±_ ((K.functorHom L).obj X) ((L.functorHom M).obj X) ((M.functorHom N).obj X)).hom x =
    ‚ü®x.1.1, x.1.2, x.2‚ü© := rfl

noncomputable instance enrichedCategory : EnrichedCategory (C ‚•§ Type max v' v u) (C ‚•§ D) where
  Hom := functorHom
  id F := natTransEquiv (ùüô F)
  comp F G H := { app := fun X ‚ü®f, g‚ü© => f.comp g }

/-
def HomObjEquiv (F G H : C ‚•§ Type max u v v') : (F.HomObj H G) ‚âÉ (F ‚äó G ‚ü∂ H) where
  toFun a := ‚ü®fun X ‚ü®x, y‚ü© ‚Ü¶ a.app X y x, fun X Y f ‚Ü¶ by
    ext ‚ü®x, y‚ü©
    erw [congr_fun (a.naturality f y) x]
    rfl ‚ü©
  invFun a := ‚ü®fun X y x ‚Ü¶ a.app X (x, y), fun œÜ y ‚Ü¶ by
    ext x
    erw [congr_fun (a.naturality œÜ) (x, y)]
    rfl ‚ü©
  left_inv _ := by aesop
  right_inv _ := by aesop
-/

end Functor
